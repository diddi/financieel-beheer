name: Deploy Website

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Prepare files for deployment
      run: |
        # Debug mode
        set -x
        
        # Maak de deployment directory
        echo "Stap 1: Deployment directory aanmaken"
        mkdir -p deploy_all
        
        # Kopieer alle essentiële mappen en bestanden
        echo "Stap 2: Bestanden kopiëren"
        cp -r controllers deploy_all/
        cp -r models deploy_all/
        cp -r views deploy_all/
        cp -r core deploy_all/
        cp -r helpers deploy_all/
        cp -r services deploy_all/
        cp -r database deploy_all/
        
        # Kopieer statische bestanden indien aanwezig
        if [ -d "public/assets" ]; then
          mkdir -p deploy_all/assets
          cp -r public/assets/* deploy_all/assets/
        fi
        
        if [ -d "public/css" ]; then
          mkdir -p deploy_all/css
          cp -r public/css/* deploy_all/css/
        fi
        
        if [ -d "public/js" ]; then
          mkdir -p deploy_all/js
          cp -r public/js/* deploy_all/js/
        fi
        
        cp autoload.php deploy_all/
        
        # Maak een aangepaste .htaccess
        echo "Stap 3: Maak .htaccess bestand"
        cat > deploy_all/.htaccess << 'EOL'
        # Activeer rewrite engine
        RewriteEngine On
        
        # Sta directorylistings niet toe
        Options -Indexes
        
        # Omleiden alles naar index.php, behalve bestaande bestanden
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteRule ^(.*)$ index.php [QSA,L]
        
        # PHP-instellingen
        php_flag display_errors off
        php_value upload_max_filesize 10M
        php_value post_max_size 10M
        
        # Voorkom toegang tot gevoelige bestanden
        <FilesMatch "^\.">
            Order allow,deny
            Deny from all
        </FilesMatch>
        
        # Beveilig config-bestanden
        <FilesMatch "\.(env|config|ini|json|lock)$">
            Order allow,deny
            Deny from all
        </FilesMatch>
        EOL
        
        # Maak database configuratie (pas aan voor productie)
        echo "Stap 4: Database configuratie maken"
        mkdir -p deploy_all/config
        cat > deploy_all/config/database.php << 'EOL'
        <?php
        return [
            'host' => 'localhost',
            'dbname' => 'sunshine_geldbeheer',
            'username' => 'sunshine_geldbeheer',
            'password' => 'Veilig-2024', // Dit moet aangepast worden naar het echte wachtwoord
            'charset' => 'utf8mb4'
        ];
        EOL
        
        # Maak index.php bestand dat alle functionaliteit inlaadt
        echo "Stap 5: Index.php maken"
        cat > deploy_all/index.php << 'EOL'
        <?php
        // Definieer het pad naar de applicatie
        define('ROOT_PATH', __DIR__);
        
        // Laad de autoloader
        require_once ROOT_PATH . '/autoload.php';
        
        // Gebruik de namespace
        use App\Core\Router;
        use App\Core\Session;
        
        // Start sessie
        Session::start();
        
        // Maak router-instantie
        $router = new Router();
        
        // Definieer routes (deze moeten overeenkomen met de routes in public/index.php)
        // Authentication routes
        $router->register('/', ['controller' => 'DashboardController', 'action' => 'index']);
        $router->register('/login', ['controller' => 'AuthController', 'action' => 'login']);
        $router->register('/register', ['controller' => 'AuthController', 'action' => 'register']);
        $router->register('/logout', ['controller' => 'AuthController', 'action' => 'logout']);
        $router->register('/profile', ['controller' => 'AuthController', 'action' => 'profile']);
        $router->register('/profile/update', ['controller' => 'AuthController', 'action' => 'updateProfile'], 'POST');
        $router->register('/profile/change-password', ['controller' => 'AuthController', 'action' => 'changePassword'], 'POST');
        $router->register('/forgot-password', ['controller' => 'AuthController', 'action' => 'forgotPassword']);
        $router->register('/reset-password', ['controller' => 'AuthController', 'action' => 'resetPassword'], 'POST');
        
        // Transaction routes
        $router->register('/transactions', ['controller' => 'TransactionController', 'action' => 'index']);
        $router->register('/transactions/create', ['controller' => 'TransactionController', 'action' => 'create']);
        $router->register('/transactions/store', ['controller' => 'TransactionController', 'action' => 'store'], 'POST');
        $router->register('/transactions/edit', ['controller' => 'TransactionController', 'action' => 'edit']);
        $router->register('/transactions/update', ['controller' => 'TransactionController', 'action' => 'update'], 'POST');
        $router->register('/transactions/delete', ['controller' => 'TransactionController', 'action' => 'delete']);
        
        // Account routes
        $router->register('/accounts', ['controller' => 'AccountController', 'action' => 'index']);
        $router->register('/accounts/create', ['controller' => 'AccountController', 'action' => 'create']);
        $router->register('/accounts/store', ['controller' => 'AccountController', 'action' => 'store'], 'POST');
        $router->register('/accounts/edit', ['controller' => 'AccountController', 'action' => 'edit']);
        $router->register('/accounts/update', ['controller' => 'AccountController', 'action' => 'update'], 'POST');
        $router->register('/accounts/delete', ['controller' => 'AccountController', 'action' => 'delete']);
        
        // Category routes
        $router->register('/categories', ['controller' => 'CategoryController', 'action' => 'index']);
        $router->register('/categories/create', ['controller' => 'CategoryController', 'action' => 'create']);
        $router->register('/categories/store', ['controller' => 'CategoryController', 'action' => 'store'], 'POST');
        $router->register('/categories/edit', ['controller' => 'CategoryController', 'action' => 'edit']);
        $router->register('/categories/update', ['controller' => 'CategoryController', 'action' => 'update'], 'POST');
        $router->register('/categories/delete', ['controller' => 'CategoryController', 'action' => 'delete']);
        
        // Budget routes
        $router->register('/budgets', ['controller' => 'BudgetController', 'action' => 'index']);
        $router->register('/budgets/create', ['controller' => 'BudgetController', 'action' => 'create']);
        $router->register('/budgets/store', ['controller' => 'BudgetController', 'action' => 'store'], 'POST');
        $router->register('/budgets/edit', ['controller' => 'BudgetController', 'action' => 'edit']);
        $router->register('/budgets/update', ['controller' => 'BudgetController', 'action' => 'update'], 'POST');
        $router->register('/budgets/delete', ['controller' => 'BudgetController', 'action' => 'delete']);
        
        // Report routes
        $router->register('/reports', ['controller' => 'ReportController', 'action' => 'index']);
        $router->register('/reports/category', ['controller' => 'ReportController', 'action' => 'categoryDetail']);
        
        // Savings routes
        $router->register('/savings', ['controller' => 'SavingsController', 'action' => 'index']);
        $router->register('/savings/create', ['controller' => 'SavingsController', 'action' => 'create']);
        $router->register('/savings/store', ['controller' => 'SavingsController', 'action' => 'store'], 'POST');
        $router->register('/savings/show', ['controller' => 'SavingsController', 'action' => 'show']);
        $router->register('/savings/edit', ['controller' => 'SavingsController', 'action' => 'edit']);
        $router->register('/savings/update', ['controller' => 'SavingsController', 'action' => 'update'], 'POST');
        $router->register('/savings/delete', ['controller' => 'SavingsController', 'action' => 'delete']);
        $router->register('/savings/add-contribution', ['controller' => 'SavingsController', 'action' => 'addContribution'], 'POST');
        $router->register('/savings/remove-contribution', ['controller' => 'SavingsController', 'action' => 'removeContribution']);
        
        // Export routes
        $router->register('/export', ['controller' => 'ExportController', 'action' => 'index']);
        $router->register('/export/transactions', ['controller' => 'ExportController', 'action' => 'exportTransactions'], 'POST');
        $router->register('/export/budgets', ['controller' => 'ExportController', 'action' => 'exportBudgets'], 'POST');
        $router->register('/export/accounts', ['controller' => 'ExportController', 'action' => 'exportAccounts'], 'POST');
        $router->register('/export/download', ['controller' => 'ExportController', 'action' => 'download']);
        
        // Notification routes
        $router->register('/notifications', ['controller' => 'NotificationController', 'action' => 'index']);
        $router->register('/notifications/mark-read', ['controller' => 'NotificationController', 'action' => 'markAsRead'], 'POST');
        $router->register('/notifications/mark-all-read', ['controller' => 'NotificationController', 'action' => 'markAllAsRead'], 'POST');
        $router->register('/notifications/count', ['controller' => 'NotificationController', 'action' => 'getUnreadCount']);
        
        // Recurring transaction routes
        $router->register('/recurring', ['controller' => 'RecurringTransactionController', 'action' => 'index']);
        $router->register('/recurring/create', ['controller' => 'RecurringTransactionController', 'action' => 'create']);
        $router->register('/recurring/store', ['controller' => 'RecurringTransactionController', 'action' => 'store'], 'POST');
        $router->register('/recurring/edit', ['controller' => 'RecurringTransactionController', 'action' => 'edit']);
        $router->register('/recurring/update', ['controller' => 'RecurringTransactionController', 'action' => 'update'], 'POST');
        $router->register('/recurring/delete', ['controller' => 'RecurringTransactionController', 'action' => 'delete']);
        
        // Dispatch de route
        $router->dispatch();
        EOL
        
        # Behoud een paar testbestanden voor debugging
        echo "Stap 6: Testbestanden aanmaken"
        cat > deploy_all/test.php << 'EOL'
        <?php
        echo '<h1>Test Pagina</h1>';
        echo '<p>De PHP-server werkt!</p>';
        ?>
        EOL
        
        cat > deploy_all/info.php << 'EOL'
        <?php
        phpinfo();
        ?>
        EOL
        
        echo "Stap 7: Readme toevoegen"
        cat > deploy_all/README.txt << 'EOL'
        Financieel Beheer Applicatie
        ===========================
        
        Deze applicatie is gedeployed via GitHub Actions.
        
        Bezoek de volgende URL's om te beginnen:
        - /login - Om in te loggen
        - /register - Om een account aan te maken
        
        Testpagina's:
        - /test.php - Om te controleren of PHP werkt
        - /info.php - Voor gedetailleerde PHP-informatie
        EOL
    
    - name: FTP Deploy All Files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        server-dir: /
        local-dir: ./deploy_all/
        exclude: |
          **/.git*
          **/.git*/**
          .env
          README.md
          .DS_Store

# Hoe te gebruiken:
# 1. Ga naar je GitHub repository
# 2. Klik op Settings > Secrets and variables > Actions
# 3. Voeg de volgende repository secrets toe:
#    - FTP_SERVER: ftp.sunshine.be
#    - FTP_USERNAME: jouw-ftp-gebruikersnaam
#    - FTP_PASSWORD: jouw-ftp-wachtwoord