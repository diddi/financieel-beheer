name: Deploy Website

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Prepare files for deployment
      run: |
        # Debug mode
        set -x
        
        # Maak de deployment directory
        echo "Stap 1: Deployment directory aanmaken"
        mkdir -p deploy_all
        
        # Kopieer alle essentiële mappen en bestanden
        echo "Stap 2: Bestanden kopiëren"
        cp -r controllers deploy_all/
        cp -r models deploy_all/
        cp -r views deploy_all/
        cp -r core deploy_all/
        cp -r helpers deploy_all/
        cp -r services deploy_all/
        cp -r database deploy_all/
        
        # Kopieer statische bestanden indien aanwezig
        if [ -d "public/assets" ]; then
          mkdir -p deploy_all/assets
          cp -r public/assets/* deploy_all/assets/
        fi
        
        if [ -d "public/css" ]; then
          mkdir -p deploy_all/css
          cp -r public/css/* deploy_all/css/
        fi
        
        if [ -d "public/js" ]; then
          mkdir -p deploy_all/js
          cp -r public/js/* deploy_all/js/
        fi
        
        cp autoload.php deploy_all/
        
        # Maak een vereenvoudigde autoloader voor namespace problemen
        echo "Extra stap: Alternatieve autoloader maken"
        cat > deploy_all/alt_autoload.php << 'EOL'
        <?php
        /**
         * Alternatieve Autoloader voor Financieel Beheer
         * Deze autoloader is speciaal gemaakt voor de productieomgeving
         * Gebaseerd op PSR-4 standaard
         */
        
        // Composer autoloader indien beschikbaar
        if (file_exists(__DIR__ . '/vendor/autoload.php')) {
            require_once __DIR__ . '/vendor/autoload.php';
        }
        
        // Definieer het basepath
        define('ROOT_PATH', __DIR__);
        
        // Directe laadstrategie - vooraf bekende klassen laden
        $classMap = [
            // Core classes
            'App\\Core\\Router' => ROOT_PATH . '/core/Router.php',
            'App\\Core\\Session' => ROOT_PATH . '/core/Session.php',
            'App\\Core\\Database' => ROOT_PATH . '/core/Database.php',
            'App\\Core\\Auth' => ROOT_PATH . '/core/Auth.php',
            'App\\Core\\Controller' => ROOT_PATH . '/core/Controller.php',
            
            // Controllers (zonder App prefix)
            'Router' => ROOT_PATH . '/core/Router.php',
            'Session' => ROOT_PATH . '/core/Session.php',
            'Database' => ROOT_PATH . '/core/Database.php',
            'Auth' => ROOT_PATH . '/core/Auth.php',
            'Controller' => ROOT_PATH . '/core/Controller.php',
            
            // Controllers (zonder App prefix)
            'AuthController' => ROOT_PATH . '/controllers/AuthController.php',
            'DashboardController' => ROOT_PATH . '/controllers/DashboardController.php',
            'TransactionController' => ROOT_PATH . '/controllers/TransactionController.php',
            'AccountController' => ROOT_PATH . '/controllers/AccountController.php',
            
            // Controllers (met App prefix)
            'App\\Controllers\\AuthController' => ROOT_PATH . '/controllers/AuthController.php',
            'App\\Controllers\\DashboardController' => ROOT_PATH . '/controllers/DashboardController.php',
            'App\\Controllers\\TransactionController' => ROOT_PATH . '/controllers/TransactionController.php',
            'App\\Controllers\\AccountController' => ROOT_PATH . '/controllers/AccountController.php',
        ];
        
        // ClassMap autoloader - snelle directe lookup voor bekende klassen
        spl_autoload_register(function ($className) use ($classMap) {
            if (isset($classMap[$className])) {
                // Log voor debugging
                error_log("ClassMap autoloader laadt: $className uit bestand: {$classMap[$className]}");
                
                // Controleer of het bestand bestaat
                if (file_exists($classMap[$className])) {
                    require_once $classMap[$className];
                    return true;
                }
            }
            return false;
        });
        
        // PSR-4 stijl autoloader
        spl_autoload_register(function ($className) {
            // Log debugging info
            error_log("PSR-4 autoloader probeert te laden: $className");
            
            // Verwijder leading backslash indien aanwezig
            $className = ltrim($className, '\\');
            
            // Probeer met App namespace prefix
            if (strpos($className, 'App\\') === 0) {
                // Verwijder 'App\' en maak bestandspad
                $relativeClass = substr($className, 4);
                $file = ROOT_PATH . '/' . str_replace('\\', '/', $relativeClass) . '.php';
                
                error_log("App\\ namespace prefix gevonden, zoekt bestand: $file");
                
                if (file_exists($file)) {
                    require_once $file;
                    return true;
                }
            }
            
            // Probeer zonder namespace maar met directory mapping voor bekende directories
            $parts = explode('\\', $className);
            $class = end($parts);
            
            // Probeer verschillende bekende directory paden
            $directories = [
                'controllers' => ['Controller'],
                'models' => ['Model'],
                'core' => ['Core', 'Router', 'Session', 'Database', 'Auth'],
                'services' => ['Service'],
                'helpers' => ['Helper', 'Util']
            ];
            
            foreach ($directories as $dir => $patterns) {
                // Controleer of de klassenaam overeenkomt met bekende patronen voor deze directory
                $matchesPattern = false;
                foreach ($patterns as $pattern) {
                    if (strpos($class, $pattern) !== false) {
                        $matchesPattern = true;
                        break;
                    }
                }
                
                // Of controleer direct de bestandsnaam
                $file = ROOT_PATH . "/$dir/$class.php";
                error_log("Zoeken in directorymap: $file");
                
                if (file_exists($file)) {
                    require_once $file;
                    return true;
                }
            }
            
            return false;
        });
        
        // Legacy autoloader - direct laden van bekende klassen
        $coreClasses = ['Session', 'Router', 'Database', 'Auth', 'Controller'];
        foreach ($coreClasses as $class) {
            $file = ROOT_PATH . "/core/{$class}.php";
            if (file_exists($file)) {
                require_once $file;
            }
        }
        
        $modelClasses = ['User', 'Account', 'AccountType', 'Category', 'Transaction', 'Budget', 'SavingsGoal'];
        foreach ($modelClasses as $class) {
            $file = ROOT_PATH . "/models/{$class}.php";
            if (file_exists($file)) {
                require_once $file;
            }
        }
        
        $controllerClasses = ['AuthController', 'DashboardController', 'TransactionController', 'AccountController'];
        foreach ($controllerClasses as $class) {
            $file = ROOT_PATH . "/controllers/{$class}.php";
            if (file_exists($file)) {
                require_once $file;
            }
        }
        
        // Class alias voor backward compatibility
        // Dit zorgt ervoor dat klassen zonder namespace ook beschikbaar zijn met namespace
        class_alias('Router', 'App\\Core\\Router');
        class_alias('Session', 'App\\Core\\Session');
        class_alias('Database', 'App\\Core\\Database');
        class_alias('Auth', 'App\\Core\\Auth');
        
        // Controleer of de core klassen bestaan
        if (!class_exists('App\\Core\\Router') && !class_exists('Router')) {
            error_log("KRITIEKE FOUT: Router class niet gevonden na autoloading!");
        }
        if (!class_exists('App\\Core\\Session') && !class_exists('Session')) {
            error_log("KRITIEKE FOUT: Session class niet gevonden na autoloading!");
        }
        EOL
        
        # Maak een test bestand voor de alternatieve autoloader
        cat > deploy_all/alt_loader_test.php << 'EOL'
        <?php
        ini_set('display_errors', 1);
        error_reporting(E_ALL);
        
        define('ROOT_PATH', __DIR__);
        
        echo "<h1>Test Alternatieve Autoloader</h1>";
        
        try {
            echo "<p>Autoloader laden...</p>";
            require_once 'alt_autoload.php';
            echo "<p>Autoloader geladen!</p>";
            
            echo "<h2>Class tests met namespace:</h2>";
            echo "<pre>";
            
            // Test of de classes geladen kunnen worden via namespaces
            $classTests = [
                '\\App\\Core\\Router',
                '\\App\\Core\\Session',
                '\\App\\Core\\Auth',
                '\\App\\Core\\Database',
                '\\App\\Controllers\\AuthController',
                '\\App\\Controllers\\DashboardController',
                '\\App\\Models\\User',
                'Router', // Zonder namespace
                'Session', // Zonder namespace
                'AuthController' // Zonder namespace
            ];
            
            foreach ($classTests as $className) {
                echo "Class $className: ";
                if (class_exists($className)) {
                    echo "Kan worden geladen\n";
                    // Toon methoden
                    echo "  Beschikbare methoden: ";
                    $methods = get_class_methods($className);
                    echo implode(", ", $methods) . "\n";
                } else {
                    echo "Kan NIET worden geladen\n";
                }
            }
            
            echo "</pre>";
            
            echo "<h2>Test Router functionaliteit:</h2>";
            echo "<pre>";
            
            if (class_exists('\\App\\Core\\Router')) {
                $router = new \App\Core\Router();
                echo "Router object gemaakt \n";
                
                try {
                    // Registreer een test route
                    $router->register('/test', ['controller' => 'TestController', 'action' => 'index']);
                    echo "Route geregistreerd \n";
                } catch (Exception $e) {
                    echo "Fout bij registreren route: " . $e->getMessage() . "\n";
                }
            } else {
                echo "Kan geen Router object maken omdat de class niet bestaat\n";
            }
            
            echo "</pre>";
            
            echo "<h2>Controleer Controller Classes:</h2>";
            echo "<pre>";
            $controllerDir = ROOT_PATH . '/controllers';
            if (is_dir($controllerDir)) {
                $files = scandir($controllerDir);
                foreach ($files as $file) {
                    if ($file != '.' && $file != '..' && strpos($file, '.php') !== false) {
                        $className = basename($file, '.php');
                        echo "Controller bestand: $file - ";
                        
                        if (class_exists($className) || class_exists("\\App\\Controllers\\$className")) {
                            echo "Class kan worden geladen\n";
                        } else {
                            echo "Class kan NIET worden geladen\n";
                            // Toon bestandsinhoud voor eerste 5 regels
                            $content = file_get_contents($controllerDir . '/' . $file);
                            $lines = explode("\n", $content);
                            echo "  Eerste regels: \n";
                            for($i = 0; $i < min(5, count($lines)); $i++) {
                                echo "    " . htmlspecialchars($lines[$i]) . "\n";
                            }
                        }
                    }
                }
            } else {
                echo "Controllers directory niet gevonden\n";
            }
            echo "</pre>";
            
            echo "<h2>Bestandsstructuur:</h2>";
            echo "<pre>";
            
            $files = scandir(ROOT_PATH);
            foreach ($files as $file) {
                if ($file != '.' && $file != '..') {
                    $is_dir = is_dir(ROOT_PATH . '/' . $file) ? 'D' : 'F';
                    $size = filesize(ROOT_PATH . '/' . $file);
                    echo "$is_dir\t$size\t$file\n";
                    
                    // Als het een directory is, scan ook de inhoud
                    if ($is_dir == 'D' && in_array($file, ['controllers', 'core', 'models'])) {
                        $subFiles = scandir(ROOT_PATH . '/' . $file);
                        foreach ($subFiles as $subFile) {
                            if ($subFile != '.' && $subFile != '..') {
                                $sub_is_dir = is_dir(ROOT_PATH . '/' . $file . '/' . $subFile) ? 'D' : 'F';
                                $sub_size = filesize(ROOT_PATH . '/' . $file . '/' . $subFile);
                                echo "  $sub_is_dir\t$sub_size\t$file/$subFile\n";
                            }
                        }
                    }
                }
            }
            
            echo "</pre>";
            
            echo "<h2>PHP Informatie:</h2>";
            echo "<pre>";
            echo "PHP versie: " . phpversion() . "\n";
            echo "Server: " . $_SERVER['SERVER_SOFTWARE'] . "\n";
            echo "Document Root: " . $_SERVER['DOCUMENT_ROOT'] . "\n";
            echo "Request URI: " . $_SERVER['REQUEST_URI'] . "\n";
            echo "</pre>";
            
        } catch (Exception $e) {
            echo "<p>Error: " . $e->getMessage() . "</p>";
            echo "<p>File: " . $e->getFile() . " (line " . $e->getLine() . ")</p>";
            echo "<pre>" . $e->getTraceAsString() . "</pre>";
        }
        EOL
        
        # Maak index.php bestand dat alle functionaliteit inlaadt
        echo "Stap 5: Index.php maken"
        cat > deploy_all/index.php << 'EOL'
        <?php
        // Schakel alle foutrapportage in en toon fouten direct in de browser
        ini_set('display_errors', 1);
        error_reporting(E_ALL);
        
        // Schakel foutlogging tijdelijk uit omdat dit mogelijk problemen geeft
        ini_set('log_errors', 0);
        
        // Definieer het pad naar de applicatie
        define('ROOT_PATH', __DIR__);
        
        try {
            echo "<!--DEBUG: Start autoloader laden-->";
            
            // Probeer eerst de standaard autoloader
            $autoloadSuccess = false;
            
            if (file_exists(ROOT_PATH . '/autoload.php')) {
                try {
                    echo "<!--DEBUG: Standaard autoloader gevonden-->";
                    require_once ROOT_PATH . '/autoload.php';
                    if (class_exists('\\App\\Core\\Router') && class_exists('\\App\\Core\\Session')) {
                        $autoloadSuccess = true;
                        echo "<!--DEBUG: Standaard autoloader succesvol geladen-->";
                    } else {
                        echo "<!--DEBUG: Standaard autoloader geladen maar classes niet gevonden-->";
                    }
                } catch (Exception $e) {
                    echo "<!--DEBUG: Fout bij laden standaard autoloader: " . $e->getMessage() . "-->";
                }
            }
            
            // Als standaard autoloader faalt, probeer alternatieve
            if (!$autoloadSuccess && file_exists(ROOT_PATH . '/alt_autoload.php')) {
                try {
                    echo "<!--DEBUG: Probeer alternatieve autoloader-->";
                    require_once ROOT_PATH . '/alt_autoload.php';
                    echo "<!--DEBUG: Alternatieve autoloader geladen-->";
                    
                    // Controleer of de alternatieve autoloader heeft gewerkt
                    if (class_exists('\\App\\Core\\Router') && class_exists('\\App\\Core\\Session')) {
                        $autoloadSuccess = true;
                        echo "<!--DEBUG: Classes direct gevonden via alternatieve autoloader-->";
                    } else {
                        echo "<!--DEBUG: Classes nog niet gevonden, laad override class aliases-->";
                        // Probeer extra class alias helpers te laden
                        if (file_exists(ROOT_PATH . '/override_class_alias.php')) {
                            require_once ROOT_PATH . '/override_class_alias.php';
                            echo "<!--DEBUG: Class alias helpers geladen-->";
                            
                            // Check opnieuw
                            if (class_exists('\\App\\Core\\Router') && class_exists('\\App\\Core\\Session')) {
                                $autoloadSuccess = true;
                                echo "<!--DEBUG: Classes gevonden na class aliases-->";
                            }
                        }
                    }
                } catch (Exception $e) {
                    echo "<!--DEBUG: Fout bij laden alternatieve autoloader: " . $e->getMessage() . "-->";
                }
            }
            
            if (!$autoloadSuccess) {
                throw new Exception("Geen werkende autoloader gevonden!");
            }
            
            echo "<!--DEBUG: Na laden autoloader-->";
            
            // Controleer of hoofdklassen bestaan
            if (!class_exists('\\App\\Core\\Router')) {
                throw new Exception("Router class niet gevonden!");
            }
            
            if (!class_exists('\\App\\Core\\Session')) {
                throw new Exception("Session class niet gevonden!");
            }
            
            echo "<!--DEBUG: Classes Router en Session gevonden-->";
            
            // Gebruik de namespace
            use App\Core\Router;
            use App\Core\Session;
            
            echo "<!--DEBUG: Session starten-->";
            // Start sessie
            Session::start();
            
            echo "<!--DEBUG: Router instantiëren-->";
            // Maak router-instantie
            $router = new Router();
            
            echo "<!--DEBUG: Routes registreren-->";
            // Definieer routes
            // Authentication routes
            $router->register('/', ['controller' => 'DashboardController', 'action' => 'index']);
            $router->register('/login', ['controller' => 'AuthController', 'action' => 'login']);
            $router->register('/register', ['controller' => 'AuthController', 'action' => 'register']);
            $router->register('/logout', ['controller' => 'AuthController', 'action' => 'logout']);
            $router->register('/profile', ['controller' => 'AuthController', 'action' => 'profile']);
            $router->register('/profile/update', ['controller' => 'AuthController', 'action' => 'updateProfile'], 'POST');
            $router->register('/profile/change-password', ['controller' => 'AuthController', 'action' => 'changePassword'], 'POST');
            $router->register('/forgot-password', ['controller' => 'AuthController', 'action' => 'forgotPassword']);
            $router->register('/reset-password', ['controller' => 'AuthController', 'action' => 'resetPassword'], 'POST');
            
            // Rest van de routes (hetzelfde als voorheen)
            // Transaction routes
            $router->register('/transactions', ['controller' => 'TransactionController', 'action' => 'index']);
            $router->register('/transactions/create', ['controller' => 'TransactionController', 'action' => 'create']);
            $router->register('/transactions/store', ['controller' => 'TransactionController', 'action' => 'store'], 'POST');
            $router->register('/transactions/edit', ['controller' => 'TransactionController', 'action' => 'edit']);
            $router->register('/transactions/update', ['controller' => 'TransactionController', 'action' => 'update'], 'POST');
            $router->register('/transactions/delete', ['controller' => 'TransactionController', 'action' => 'delete']);
            
            // Account routes
            $router->register('/accounts', ['controller' => 'AccountController', 'action' => 'index']);
            $router->register('/accounts/create', ['controller' => 'AccountController', 'action' => 'create']);
            $router->register('/accounts/store', ['controller' => 'AccountController', 'action' => 'store'], 'POST');
            $router->register('/accounts/edit', ['controller' => 'AccountController', 'action' => 'edit']);
            $router->register('/accounts/update', ['controller' => 'AccountController', 'action' => 'update'], 'POST');
            $router->register('/accounts/delete', ['controller' => 'AccountController', 'action' => 'delete']);
            
            // Category routes
            $router->register('/categories', ['controller' => 'CategoryController', 'action' => 'index']);
            $router->register('/categories/create', ['controller' => 'CategoryController', 'action' => 'create']);
            $router->register('/categories/store', ['controller' => 'CategoryController', 'action' => 'store'], 'POST');
            $router->register('/categories/edit', ['controller' => 'CategoryController', 'action' => 'edit']);
            $router->register('/categories/update', ['controller' => 'CategoryController', 'action' => 'update'], 'POST');
            $router->register('/categories/delete', ['controller' => 'CategoryController', 'action' => 'delete']);
            
            // Budget routes
            $router->register('/budgets', ['controller' => 'BudgetController', 'action' => 'index']);
            $router->register('/budgets/create', ['controller' => 'BudgetController', 'action' => 'create']);
            $router->register('/budgets/store', ['controller' => 'BudgetController', 'action' => 'store'], 'POST');
            $router->register('/budgets/edit', ['controller' => 'BudgetController', 'action' => 'edit']);
            $router->register('/budgets/update', ['controller' => 'BudgetController', 'action' => 'update'], 'POST');
            $router->register('/budgets/delete', ['controller' => 'BudgetController', 'action' => 'delete']);
            
            // Report routes
            $router->register('/reports', ['controller' => 'ReportController', 'action' => 'index']);
            $router->register('/reports/category', ['controller' => 'ReportController', 'action' => 'categoryDetail']);
            
            // Savings routes
            $router->register('/savings', ['controller' => 'SavingsController', 'action' => 'index']);
            $router->register('/savings/create', ['controller' => 'SavingsController', 'action' => 'create']);
            $router->register('/savings/store', ['controller' => 'SavingsController', 'action' => 'store'], 'POST');
            $router->register('/savings/show', ['controller' => 'SavingsController', 'action' => 'show']);
            $router->register('/savings/edit', ['controller' => 'SavingsController', 'action' => 'edit']);
            $router->register('/savings/update', ['controller' => 'SavingsController', 'action' => 'update'], 'POST');
            $router->register('/savings/delete', ['controller' => 'SavingsController', 'action' => 'delete']);
            $router->register('/savings/add-contribution', ['controller' => 'SavingsController', 'action' => 'addContribution'], 'POST');
            $router->register('/savings/remove-contribution', ['controller' => 'SavingsController', 'action' => 'removeContribution']);
            
            // Export routes
            $router->register('/export', ['controller' => 'ExportController', 'action' => 'index']);
            $router->register('/export/transactions', ['controller' => 'ExportController', 'action' => 'exportTransactions'], 'POST');
            $router->register('/export/budgets', ['controller' => 'ExportController', 'action' => 'exportBudgets'], 'POST');
            $router->register('/export/accounts', ['controller' => 'ExportController', 'action' => 'exportAccounts'], 'POST');
            $router->register('/export/download', ['controller' => 'ExportController', 'action' => 'download']);
            
            // Notification routes
            $router->register('/notifications', ['controller' => 'NotificationController', 'action' => 'index']);
            $router->register('/notifications/mark-read', ['controller' => 'NotificationController', 'action' => 'markAsRead'], 'POST');
            $router->register('/notifications/mark-all-read', ['controller' => 'NotificationController', 'action' => 'markAllAsRead'], 'POST');
            $router->register('/notifications/count', ['controller' => 'NotificationController', 'action' => 'getUnreadCount']);
            
            // Recurring transaction routes
            $router->register('/recurring', ['controller' => 'RecurringTransactionController', 'action' => 'index']);
            $router->register('/recurring/create', ['controller' => 'RecurringTransactionController', 'action' => 'create']);
            $router->register('/recurring/store', ['controller' => 'RecurringTransactionController', 'action' => 'store'], 'POST');
            $router->register('/recurring/edit', ['controller' => 'RecurringTransactionController', 'action' => 'edit']);
            $router->register('/recurring/update', ['controller' => 'RecurringTransactionController', 'action' => 'update'], 'POST');
            $router->register('/recurring/delete', ['controller' => 'RecurringTransactionController', 'action' => 'delete']);
            
            // Voeg een diagnostische route toe
            $router->register('/phpinfo', ['controller' => 'DashboardController', 'action' => 'phpinfo']);
            
            echo "<!--DEBUG: Huidige URL: " . $_SERVER['REQUEST_URI'] . "-->";
            
            // Dispatch de route
            echo "<!--DEBUG: Start route dispatching-->";
            $router->dispatch();
            echo "<!--DEBUG: Route dispatching voltooid-->";
            
        } catch (Exception $e) {
            // Toon error pagina met details
            http_response_code(500);
            echo '<!DOCTYPE html>';
            echo '<html><head><title>Applicatie Error</title>';
            echo '<style>body{font-family:Arial,sans-serif;line-height:1.6;max-width:800px;margin:0 auto;padding:20px}
            .error{background:#ffeeee;border-left:4px solid #cc0000;padding:10px}
            h1{color:#cc0000}pre{background:#f8f8f8;padding:10px;overflow:auto}</style>';
            echo '</head><body>';
            echo '<h1>Er is een fout opgetreden</h1>';
            echo '<div class="error">';
            echo '<p><strong>Foutmelding:</strong> ' . htmlspecialchars($e->getMessage()) . '</p>';
            echo '<p><strong>Bestand:</strong> ' . htmlspecialchars($e->getFile()) . ' op regel ' . $e->getLine() . '</p>';
            echo '</div>';
            
            echo '<h2>Stack Trace:</h2>';
            echo '<pre>' . htmlspecialchars($e->getTraceAsString()) . '</pre>';
            
            // Toon informatie over de bestanden en mappen zonder system()
            echo '<h2>Diagnostische informatie:</h2>';
            echo '<h3>Directorystructuur:</h3>';
            echo '<pre>';
            // Gebruik scandir in plaats van system
            $files = scandir(ROOT_PATH);
            foreach ($files as $file) {
                if ($file != '.' && $file != '..') {
                    $is_dir = is_dir(ROOT_PATH . '/' . $file) ? 'D' : 'F';
                    $size = filesize(ROOT_PATH . '/' . $file);
                    echo "$is_dir\t$size\t$file\n";
                }
            }
            echo '</pre>';
            
            echo '<h3>Autoloader inhoud:</h3>';
            echo '<pre>';
            if (file_exists(ROOT_PATH . '/autoload.php')) {
                highlight_file(ROOT_PATH . '/autoload.php');
            } else {
                echo "Autoload bestand niet gevonden!";
            }
            echo '</pre>';
            
            echo '<h3>Alternatieve Autoloader inhoud:</h3>';
            echo '<pre>';
            if (file_exists(ROOT_PATH . '/alt_autoload.php')) {
                highlight_file(ROOT_PATH . '/alt_autoload.php');
            } else {
                echo "Alternatieve autoload bestand niet gevonden!";
            }
            echo '</pre>';
            
            // Extra diagnostische informatie
            echo '<h3>Namespace testen:</h3>';
            echo '<pre>';
            $paths = [
                'core/Router.php',
                'controllers/AuthController.php',
                'models/User.php'
            ];
            
            foreach ($paths as $path) {
                echo "Pad $path: " . (file_exists(ROOT_PATH . '/' . $path) ? 'Bestaat' : 'Bestaat NIET') . "\n";
                if (file_exists(ROOT_PATH . '/' . $path)) {
                    echo "Inhoud: \n";
                    $content = file_get_contents(ROOT_PATH . '/' . $path);
                    $lines = explode("\n", $content);
                    // Toon alleen de eerste regels (namespace en klasse definitie)
                    for($i = 0; $i < min(10, count($lines)); $i++) {
                        echo htmlspecialchars($lines[$i]) . "\n";
                    }
                    echo "...\n\n";
                }
            }
            echo '</pre>';
            
            echo '<h3>PHP versie en modules:</h3>';
            echo '<pre>';
            echo 'PHP versie: ' . phpversion() . "\n";
            echo 'Geladen extensies: ' . implode(', ', get_loaded_extensions()) . "\n";
            echo '</pre>';
            
            echo '<h3>Server variabelen:</h3>';
            echo '<pre>';
            echo htmlspecialchars(print_r($_SERVER, true));
            echo '</pre>';
            
            echo '</body></html>';
        }
        EOL
        
        # Maak een aangepaste .htaccess
        echo "Stap 3: Maak .htaccess bestand"
        cat > deploy_all/.htaccess << 'EOL'
        # Activeer rewrite engine
        RewriteEngine On
        
        # Sta directorylistings niet toe
        Options -Indexes
        
        # Omleiden alles naar index.php, behalve bestaande bestanden
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteRule ^(.*)$ index.php [QSA,L]
        
        # PHP-instellingen
        php_flag display_errors off
        php_value upload_max_filesize 10M
        php_value post_max_size 10M
        
        # Voorkom toegang tot gevoelige bestanden
        <FilesMatch "^\.">
            Order allow,deny
            Deny from all
        </FilesMatch>
        
        # Beveilig config-bestanden
        <FilesMatch "\.(env|config|ini|json|lock)$">
            Order allow,deny
            Deny from all
        </FilesMatch>
        EOL
        
        # Maak database configuratie (pas aan voor productie)
        echo "Stap 4: Database configuratie maken"
        mkdir -p deploy_all/config
        cat > deploy_all/config/database.php << 'EOL'
        <?php
        return [
            'host' => 'localhost',
            'dbname' => 'sunshine_geldbeheer',
            'username' => 'sunshine_geldbeheer',
            'password' => 'Veilig-2024', // Dit moet aangepast worden naar het echte wachtwoord
            'charset' => 'utf8mb4'
        ];
        EOL
        
        # Maak een eenvoudige debug.php voor het testen van classes
        echo "Stap 6: Debug bestand aanmaken"
        cat > deploy_all/debug.php << 'EOL'
        <?php
        // Foutrapportage inschakelen voor debugging
        ini_set('display_errors', 1);
        error_reporting(E_ALL);
        
        // Definieer het pad naar de applicatie
        define('ROOT_PATH', __DIR__);
        
        echo "<h1>PHP Debug Pagina</h1>";
        
        echo "<h2>Omgeving:</h2>";
        echo "<pre>";
        echo "PHP versie: " . phpversion() . "\n";
        echo "Server software: " . $_SERVER['SERVER_SOFTWARE'] . "\n";
        echo "Document root: " . $_SERVER['DOCUMENT_ROOT'] . "\n";
        echo "Huidig script: " . __FILE__ . "\n";
        echo "</pre>";
        
        echo "<h2>Bestandsstructuur:</h2>";
        echo "<pre>";
        // Gebruik scandir in plaats van system
        $files = scandir(ROOT_PATH);
        foreach ($files as $file) {
            if ($file != '.' && $file != '..') {
                $is_dir = is_dir(ROOT_PATH . '/' . $file) ? 'D' : 'F';
                $size = filesize(ROOT_PATH . '/' . $file);
                echo "$is_dir\t$size\t$file\n";
            }
        }
        echo "</pre>";
        
        echo "<h2>Autoloader Test:</h2>";
        try {
            echo "Autoloader laden... ";
            if (file_exists(ROOT_PATH . '/autoload.php')) {
                require_once ROOT_PATH . '/autoload.php';
                echo "OK\n";
                
                echo "\nControleren of core classes bestaan:\n";
                $classes = [
                    '\\App\\Core\\Router',
                    '\\App\\Core\\Session',
                    '\\App\\Core\\Auth',
                    '\\App\\Core\\Database',
                    '\\App\\Controllers\\AuthController',
                    '\\App\\Controllers\\DashboardController'
                ];
                
                foreach ($classes as $class) {
                    echo "Class $class: ";
                    if (class_exists($class)) {
                        echo "Gevonden!\n";
                    } else {
                        echo "NIET GEVONDEN\n";
                    }
                }
            } else {
                echo "FOUT: autoload.php niet gevonden in " . ROOT_PATH;
            }
        } catch (Exception $e) {
            echo "FOUT: " . $e->getMessage();
        }
        
        echo "</pre>";
        
        echo "<h2>Inhoud van autoload.php:</h2>";
        echo "<pre>";
        if (file_exists(ROOT_PATH . '/autoload.php')) {
            highlight_file(ROOT_PATH . '/autoload.php');
        } else {
            echo "Bestand niet gevonden!";
        }
        echo "</pre>";
        
        echo "<h2>PHP Modules:</h2>";
        echo "<pre>";
        print_r(get_loaded_extensions());
        echo "</pre>";
        
        // Toon een map van namespaces die worden verwacht
        echo "<h2>Pad testen voor namespaces:</h2>";
        echo "<pre>";
        $namespaces = [
            'App\\Core\\Router' => 'core/Router.php',
            'App\\Core\\Session' => 'core/Session.php',
            'App\\Controllers\\AuthController' => 'controllers/AuthController.php'
        ];
        
        foreach ($namespaces as $namespace => $path) {
            echo "Namespace: $namespace\n";
            echo "Verwacht pad: " . ROOT_PATH . '/' . $path . "\n";
            echo "Bestaat: " . (file_exists(ROOT_PATH . '/' . $path) ? 'JA' : 'NEE') . "\n\n";
        }
        echo "</pre>";
        EOL
        
        # Behoud een paar testbestanden voor debugging
        echo "Stap 7: Testbestanden aanmaken"
        cat > deploy_all/test.php << 'EOL'
        <?php
        echo '<h1>Test Pagina</h1>';
        echo '<p>De PHP-server werkt!</p>';
        ?>
        EOL
        
        cat > deploy_all/info.php << 'EOL'
        <?php
        phpinfo();
        ?>
        EOL
        
        echo "Stap 8: Readme toevoegen"
        cat > deploy_all/README.txt << 'EOL'
        Financieel Beheer Applicatie
        ===========================
        
        Deze applicatie is gedeployed via GitHub Actions.
        
        Bezoek de volgende URL's om te beginnen:
        - /login - Om in te loggen
        - /register - Om een account aan te maken
        
        Testpagina's:
        - /test.php - Om te controleren of PHP werkt
        - /info.php - Voor gedetailleerde PHP-informatie
        - /debug.php - Voor diagnose van classeladerproblemen
        EOL
        
        # Kopieer ook ons debug script
        if [ -f "simple_debug.php" ]; then
          echo "Stap 9: Debug script kopiëren"
          cp simple_debug.php deploy_all/
        fi
    
    - name: FTP Deploy All Files
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        server-dir: /
        local-dir: ./deploy_all/
        exclude: |
          **/.git*
          **/.git*/**
          .env
          README.md
          .DS_Store

# Hoe te gebruiken:
# 1. Ga naar je GitHub repository
# 2. Klik op Settings > Secrets and variables > Actions
# 3. Voeg de volgende repository secrets toe:
#    - FTP_SERVER: ftp.sunshine.be
#    - FTP_USERNAME: jouw-ftp-gebruikersnaam
#    - FTP_PASSWORD: jouw-ftp-wachtwoord

# Maak een bestand dat class_alias calls genereert nadat alle classes zijn ingeladen
        echo "Stap 10: Class alias bestand maken"
        cat > deploy_all/override_class_alias.php << 'EOL'
        <?php
        /**
         * Dit bestand definieert class aliases om namespace problemen op te lossen
         * 
         * Dit script moet worden ingeladen NADAT alle classes geladen zijn
         */
        
        // Functie om alle klassen te verzamelen en aliases aan te maken
        function create_all_class_aliases() {
            // Verzamel alle geladen klassen
            $loadedClasses = get_declared_classes();
            $coreNamespacePrefix = 'App\\Core\\';
            $controllerNamespacePrefix = 'App\\Controllers\\';
            $modelNamespacePrefix = 'App\\Models\\';
            
            $aliasesCreated = 0;
            
            foreach ($loadedClasses as $className) {
                // Check voor core klassen met namespace en maak ook een niet-namespace versie
                if (strpos($className, $coreNamespacePrefix) === 0) {
                    $shortName = substr($className, strlen($coreNamespacePrefix));
                    
                    // Als de niet-namespace versie nog niet bestaat, definieer deze
                    if (!class_exists($shortName, false)) {
                        class_alias($className, $shortName);
                        $aliasesCreated++;
                    }
                }
                // Check voor controller klassen met namespace
                else if (strpos($className, $controllerNamespacePrefix) === 0) {
                    $shortName = substr($className, strlen($controllerNamespacePrefix));
                    
                    // Als de niet-namespace versie nog niet bestaat, definieer deze
                    if (!class_exists($shortName, false)) {
                        class_alias($className, $shortName);
                        $aliasesCreated++;
                    }
                }
                // Check voor model klassen met namespace
                else if (strpos($className, $modelNamespacePrefix) === 0) {
                    $shortName = substr($className, strlen($modelNamespacePrefix));
                    
                    // Als de niet-namespace versie nog niet bestaat, definieer deze
                    if (!class_exists($shortName, false)) {
                        class_alias($className, $shortName);
                        $aliasesCreated++;
                    }
                }
                // Check ook niet-namespace klassen en maak namespace versies
                else if (in_array($className, ['Router', 'Session', 'Database', 'Auth', 'Controller'])) {
                    if (!class_exists($coreNamespacePrefix . $className, false)) {
                        class_alias($className, $coreNamespacePrefix . $className);
                        $aliasesCreated++;
                    }
                }
                // Check controllers zonder namespace
                else if (strpos($className, 'Controller') !== false && strpos($className, '\\') === false) {
                    if (!class_exists($controllerNamespacePrefix . $className, false)) {
                        class_alias($className, $controllerNamespacePrefix . $className);
                        $aliasesCreated++;
                    }
                }
            }
            
            return $aliasesCreated;
        }
        
        // Voer de alias creator function uit en log het resultaat
        $count = create_all_class_aliases();
        error_log("Class aliases aangemaakt voor $count klassen");
        
        // Specifieke aliassen voor kritieke klassen
        if (class_exists('Router') && !class_exists('App\\Core\\Router')) {
            class_alias('Router', 'App\\Core\\Router');
            error_log("Geforceerde alias gemaakt voor Router naar App\\Core\\Router");
        }
        if (class_exists('Session') && !class_exists('App\\Core\\Session')) {
            class_alias('Session', 'App\\Core\\Session');
            error_log("Geforceerde alias gemaakt voor Session naar App\\Core\\Session");
        }
        EOL